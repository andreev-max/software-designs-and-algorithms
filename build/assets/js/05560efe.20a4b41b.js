"use strict";(self.webpackChunksoftware_designs_and_algorithms=self.webpackChunksoftware_designs_and_algorithms||[]).push([[3393],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9528:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(7294);function a(e){var t=e.src,n=e.title;return r.createElement("iframe",{title:n,src:t,style:{width:"100%",height:"500px",border:0,borderRadius:"4px",overflow:"hidden"},allow:"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"})}},4401:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=n(9528),s=["components"],l={sidebar_position:4},u="3. Divide and Conquer",d={unversionedId:"algorithms-and-data-structures-part-2/divide_and_conquer",id:"algorithms-and-data-structures-part-2/divide_and_conquer",title:"3. Divide and Conquer",description:"We can choose from a wide range of algorithm design techniques. For insertion sort, we used an incremental approach: having sorted the subarray A[1 .. j-1], we inserted the single element A[j] into its proper place, yielding the sorted subarray A[1 .. j].",source:"@site/docs/8-algorithms-and-data-structures-part-2/divide_and_conquer.mdx",sourceDirName:"8-algorithms-and-data-structures-part-2",slug:"/algorithms-and-data-structures-part-2/divide_and_conquer",permalink:"/docs/algorithms-and-data-structures-part-2/divide_and_conquer",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"2. Insertion Sort",permalink:"/docs/algorithms-and-data-structures-part-2/insertion_sort"},next:{title:"4. Heap. Heap Sort. Priority Queue",permalink:"/docs/algorithms-and-data-structures-part-2/heap"}},p={},c=[{value:"3.1 Merge Sort",id:"31-merge-sort",level:2}],m={toc:c};function h(e){var t=e.components,l=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"3-divide-and-conquer"},"3. Divide and Conquer"),(0,o.kt)("p",null,"We can choose from a wide range of algorithm design techniques. For insertion sort, we used an incremental approach: having sorted the subarray ",(0,o.kt)("inlineCode",{parentName:"p"},"A[1 .. j-1]"),", we inserted the single element ",(0,o.kt)("inlineCode",{parentName:"p"},"A[j]")," into its proper place, yielding the sorted subarray ",(0,o.kt)("inlineCode",{parentName:"p"},"A[1 .. j]"),"."),(0,o.kt)("p",null,'Here we will examine an alternative design approach, known as "divide-and-conquer". We\'ll use divide-and-conquer to design a sorting algorithm whose worst-case running time is much less than that of insertion sort. One advantage of divide-and-conquer algorithms is that their running times are often easily determined.'),(0,o.kt)("p",null,"Many useful algorithms are recursive in structure: to solve a given problem, they call themselves recursively one or more times to deal with closely related sub-problems. These algorithms typically follow a divide-and-conquer approach: they break the problem into several subproblems that are similar to the original problem but smaller, solve the subproblems recursively, and then combine these solutions to create a solution to the original problem."),(0,o.kt)("p",null,"Figure 3.1"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Divide and conquer",src:n(6570).Z,width:"533",height:"402"})),(0,o.kt)("p",null,"The divide-and-conquer paradigm involves three steps at each level of the recursion:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Divide the problem into a number of subproblems that are smaller instances of the same problem."),(0,o.kt)("li",{parentName:"ul"},"Conquer the subproblems by solving them recursively. If the subproblem sizes are small enough, however, just solve the subproblems in a straightforward manner."),(0,o.kt)("li",{parentName:"ul"},"Combine the solutions to the subproblems into the solution for the original problem.")),(0,o.kt)("p",null,"The merge sort algorithm closely follows the divide-and-conquer paradigm. Intuitively, it operates as follows."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Divide: Divide the n-element sequence to be sorted into two subsequences of ",(0,o.kt)("inlineCode",{parentName:"li"},"n/2")," elements each."),(0,o.kt)("li",{parentName:"ul"},"Conquer: Sort the two subsequences recursively using merge sort."),(0,o.kt)("li",{parentName:"ul"},"Combine: Merge the two sorted subsequences to produce the sorted answer")),(0,o.kt)("p",null,"Figure 3.1"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Merge sort",src:n(3133).Z,width:"502",height:"477"})),(0,o.kt)("h2",{id:"31-merge-sort"},"3.1 Merge Sort"),(0,o.kt)("p",null,"Listing 3.1 - Merge sort"),(0,o.kt)(i.Z,{title:"Merge sort",src:"https://codesandbox.io/embed/merge-sort-czb8jn?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark",mdxType:"CodeEmbedLink"}),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The space complexity of Merge Sort implementation above is: ",(0,o.kt)("inlineCode",{parentName:"p"},"O(n)")," It can be improved by implemented in-place merge sort when the sort is applied to the provided array without creating new one and thus saving the memory. More information about can be found ",(0,o.kt)("a",{parentName:"p",href:"https://www.happycoders.eu/algorithms/merge-sort/"},"here"),"."))),(0,o.kt)("p",null,"This is how ",(0,o.kt)("inlineCode",{parentName:"p"},"mergeSort")," looks like. We take half the length of the array and divide it into two parts. And we call the ",(0,o.kt)("inlineCode",{parentName:"p"},"merge")," function to the same sorting from the left and right sides. The merge function itself compares and merges our sequences."),(0,o.kt)("p",null,"Although the code for merge sort works correctly when the number of elements is not even, our recurrence-based analysis is simplified if we assume that the original problem size is a power of 2. Each divide step then yields two subsequences of size exactly ",(0,o.kt)("inlineCode",{parentName:"p"},"n/2"),". This assumption does not affect the order of growth of the solution to the recurrence."),(0,o.kt)("p",null,"We reason as follows to set up the recurrence for ",(0,o.kt)("inlineCode",{parentName:"p"},"T(n)"),", the worst-case running time of merge sort on n numbers. Merge sort on just one element takes constant time. When we have ",(0,o.kt)("inlineCode",{parentName:"p"},"n > 1")," elements, we break down the running time as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Divide: The divide step just computes the middle of the subarray, which takes constant time. Thus, ",(0,o.kt)("inlineCode",{parentName:"li"},"D(n) = \u0398(1)"),"."),(0,o.kt)("li",{parentName:"ul"},"Conquer: We recursively solve two subproblems, each of size ",(0,o.kt)("inlineCode",{parentName:"li"},"n/2"),", which contributes ",(0,o.kt)("inlineCode",{parentName:"li"},"2T(n/2)")," to the running time."),(0,o.kt)("li",{parentName:"ul"},"Combine: We have already noted that the MERGE procedure on an n-element subarray takes time ",(0,o.kt)("inlineCode",{parentName:"li"},"\u0398(n)"),", and so ",(0,o.kt)("inlineCode",{parentName:"li"},"C(n) = \u0398(n)"),".")),(0,o.kt)("p",null,"When we add the functions ",(0,o.kt)("inlineCode",{parentName:"p"},"D(n)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"C(n)")," for the merge sort analysis, we are adding a function that is ",(0,o.kt)("inlineCode",{parentName:"p"},"\u0398(n)")," and a function that is ",(0,o.kt)("inlineCode",{parentName:"p"},"\u0398(1)"),". This sum is a linear function of ",(0,o.kt)("inlineCode",{parentName:"p"},"n"),", that is ",(0,o.kt)("inlineCode",{parentName:"p"},"\u0398(n)"),". Adding it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"2T(n/2)"),' term from the "conquer" step gives the recurrence for the worst-case running time ',(0,o.kt)("inlineCode",{parentName:"p"},"T(n)")," of merge sort:"),(0,o.kt)("div",{className:"formula"},(0,o.kt)("img",{src:"https://latex.codecogs.com/svg.image?T(n)=\\begin{cases}\\theta(1)&\\text{&space;if&space;}n=1;\\\\2T(\\frac{n}{2})&plus;\\theta(n)&\\text{&space;if&space;}n>1\\end{cases}",title:"T(n)=\\begin{cases}\\theta(1)&\\text{ if }n=1\\\\2T(\\frac{n}{2})+\\theta(n)&\\text{ if }n>1\\end{cases}"})),(0,o.kt)("p",null,'The master method provides a "cookbook" method for solving recurrences of the form:'),(0,o.kt)("img",{src:"https://latex.codecogs.com/svg.image?T(n)=aT(\\tfrac{n}{b})&plus;f(n)",title:"T(n) = aT(\\tfrac{n}{b}) + f(n)"}),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"a \u2265 1")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"b > 1")," are constants and ",(0,o.kt)("inlineCode",{parentName:"p"},"f(n)")," is an asymptotically positive function."),(0,o.kt)("p",null,"According to the master theorem:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("code",null,"f(n) = O(n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"b"),"a-\u03f5"),")")," for some constant ",(0,o.kt)("inlineCode",{parentName:"li"},"\u03f5 > 0"),", then ",(0,o.kt)("code",null,"T(n) = \u03b8(n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"b"),"a"),")")),(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("code",null,"f(n) = \u03b8(n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"b"),"a"),")")," then ",(0,o.kt)("code",null,"T(n) = \u03b8(n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"b"),"a"),"lgn)")),(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("code",null,"f(n) = \u03a9(n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"b"),"a+\u03f5"),")")," for some constant ",(0,o.kt)("inlineCode",{parentName:"li"},"\u03f5 > 0"),", and if ",(0,o.kt)("inlineCode",{parentName:"li"},"af(n/b) < cf(n)")," for some constant ",(0,o.kt)("inlineCode",{parentName:"li"},"c < 1")," and all sufficiently large ",(0,o.kt)("inlineCode",{parentName:"li"},"n"),","),(0,o.kt)("li",{parentName:"ul"},"then ",(0,o.kt)("inlineCode",{parentName:"li"},"T(n) = \u03b8(f(n))"))),(0,o.kt)("p",null,'Let\'s use the master method to solve the "divide and conquer" recurrence: ',(0,o.kt)("inlineCode",{parentName:"p"},"2T(n/2) + \u0398(n)"),". Here, we have ",(0,o.kt)("inlineCode",{parentName:"p"},"a=2"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"b=2"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"f(n) = \u0398(n)"),", and thus we have that: ",(0,o.kt)("code",null,"n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"b"),"a")," = n",(0,o.kt)("sup",null,"log",(0,o.kt)("sub",null,"2"),"2")," = n"),". Case 2 applies, since ",(0,o.kt)("inlineCode",{parentName:"p"},"f(n) = \u0398(n)"),", and so we have the solution: ",(0,o.kt)("inlineCode",{parentName:"p"},"T(n) = \u0398(nlgn)"),"."))}h.isMDXComponent=!0},6570:function(e,t,n){t.Z=n.p+"assets/images/divide_and_conquer-69c673d25265635c18010aba0842de66.png"},3133:function(e,t,n){t.Z=n.p+"assets/images/merge_sort-de730a5e2b905dfe8e7a8ac41c063d31.png"}}]);